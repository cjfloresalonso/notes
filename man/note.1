.TH NOTE 1 "2021" ZX2C4,anon "Encrypted Notes"

.SH NAME
note - stores and synchronizes note securely

.SH SYNOPSIS
.B note
[ 
.I COMMAND
] [ 
.I OPTIONS
]... [ 
.I ARGS
]...

.SH DESCRIPTION

.B note 
is a very simple note store that keeps note inside 
.BR gpg2 (1)
encrypted files inside either a simple directory tree residing at 
.IR ~/.note-store
, or in-place in your filesystem.

The
.B note
utility provides a series of commands for manipulating the note store,
allowing the user to add, remove, edit, and synchronize
note.

If no COMMAND is specified, COMMAND defaults to either
.B edit
or
.BR ls ,
depending on the type of specifier in ARGS. Alternatively, if \fINOTES_STORE_ENABLE_EXTENSIONS\fP
is set to "true", and the file \fI.extensions/COMMAND.bash\fP exists inside the
note store and is executable, then it is sourced into the environment,
passing any arguments and environment variables. Extensions existing in a
system-wide directory, only installable by the administrator, are always enabled.

Otherwise COMMAND must be one of the valid commands listed below.

Several of the commands below rely on or provide additional functionality if
the note store directory is also a git repository. If the password store
directory is a git repository, all password store modification commands will
cause a corresponding git commit. Sub-directories may be separate nested git
repositories, and note will use the inner-most directory relative to the
current password. See the \fIEXTENDED GIT EXAMPLE\fP section for a detailed
description using \fBinit\fP and
.BR git (1).

The \fBinit\fP command must be run before other commands in order to initialize
the note store with the correct gpg key id. Notes are encrypted using
the gpg key set with \fBinit\fP.

There is a corresponding bash completion script for use with tab completing
note names in
.BR bash (1).

.SH COMMANDS

.TP
\fBinit\fP [ \fI--path=sub-folder\fP, \fI-p sub-folder\fP ] \fIgpg-id...\fP
Initialize new note storage and use
.I gpg-id
for encryption. Multiple gpg-ids may be specified, in order to encrypt each
password with multiple ids. This command must be run first before a note
store can be used. If the specified \fIgpg-id\fP is different from the key
used in any existing files, these files will be reencrypted to use the new id.
Note that use of
.BR gpg-agent (1)
is recommended so that the batch decryption does not require as much user
intervention. If \fI--path\fP or \fI-p\fP is specified, along with an argument,
a specific gpg-id or set of gpg-ids is assigned for that specific sub folder of
the password store. If only one \fIgpg-id\fP is given, and it is an empty string,
then the current \fI.gpg-id\fP file for the specified \fIsub-folder\fP (or root if
unspecified) is removed.
.TP
\fBls\fP \fIsubfolder\fP
List names of notes inside the tree at
.I subfolder
by using the
.BR tree (1)
program. This command is alternatively named \fBlist\fP.
.TP
\fBgrep\fP [\fIGREPOPTIONS\fP] \fIsearch-string\fP
Searches inside each decrypted note file for \fIsearch-string\fP, and displays line
containing matched string along with filename. Uses
.BR grep (1)
for matching. \fIGREPOPTIONS\fP are passed to
.BR grep (1)
as-is. (Note: the \fIGREP_OPTIONS\fP environment variable functions as well.)
.TP
\fBfind\fP \fInote-names\fP...
List names of notes inside the tree that match \fInote-names\fP by using the
.BR tree (1)
program. This command is alternatively named \fBsearch\fP.
.TP
\fBtouch\fP \fInote-name\fP
Create a new empty note.
.TP
\fBinsert\fP \fInote-name\fP
Create and populate a note into the note store from standard in. Will append too existing
an existing note.
.TP
\fBshow\fP \fInote-name\fP
Print a note to the terminal.
.TP
\fBedit\fP \fInote-name\fP
Insert a new note or edit an existing note using the default text editor specified
by the environment variable \fIEDITOR\fP or using
.BR vi (1)
as a fallback. This mode makes use of temporary files for editing, but care is taken to
ensure that temporary files are created in \fI/dev/shm\fP in order to avoid writing to
difficult-to-erase disk sectors. If \fI/dev/shm\fP is not accessible, fallback to
the ordinary \fITMPDIR\fP location, and print a warning.
.TP
\fBrm\fP [ \fI--recursive\fP, \fI-r\fP ] [ \fI--force\fP, \fI-f\fP ] \fInote-name\fP
Remove the note named \fInote-name\fP from the note store. This command is
alternatively named \fBremove\fP or \fBdelete\fP. If \fI--recursive\fP or \fI-r\fP
is specified, delete note-name recursively if it is a directory. If \fI--force\fP
or \fI-f\fP is specified, do not interactively prompt before removal.
.TP
\fBmv\fP [ \fI--force\fP, \fI-f\fP ] \fIold-path\fP \fInew-path\fP
Renames the note or directory named \fIold-path\fP to \fInew-path\fP. This
command is alternatively named \fBrename\fP. If \fI--force\fP is specified,
silently overwrite \fInew-path\fP if it exists. If \fInew-path\fP ends in a
trailing \fI/\fP, it is always treated as a directory. Notes are selectively
reencrypted to the corresponding keys of their new destination.
.TP
\fBcp\fP [ \fI--force\fP, \fI-f\fP ] \fIold-path\fP \fInew-path\fP
Copies the note or directory named \fIold-path\fP to \fInew-path\fP. This
command is alternatively named \fBcopy\fP. If \fI--force\fP is specified,
silently overwrite \fInew-path\fP if it exists. If \fInew-path\fP ends in a
trailing \fI/\fP, it is always treated as a directory. Passwords are selectively
reencrypted to the corresponding keys of their new destination.
.TP
\fBgit\fP \fIgit-command-args\fP...
If the note store is a git repository, pass \fIgit-command-args\fP as arguments to
.BR git (1)
using the note store as the git repository. If \fIgit-command-args\fP is \fBinit\fP,
in addition to initializing the git repository, add the current contents of the note
store to the repository in an initial commit. If the git config key \fIpass.signcommits\fP
is set to \fItrue\fP, then all commits will be signed using \fIuser.signingkey\fP or the
default git signing key. This config key may be turned on using:
.B `note git config --bool --add pass.signcommits true`
.TP
\fBhelp\fP
Show usage message.
.TP
\fBversion\fP
Show version information.

.SH FILES

.TP
.B ~/.note-store
The default note storage directory.
.TP
.B ~/.note-store/.gpg-id
Contains the default gpg key identification used for encryption and decryption.
Multiple gpg keys may be specified in this file, one per line. If this file
exists in any sub directories, notes inside those sub directories are
encrypted using those keys. This should be set using the \fBinit\fP command.
.TP
.B ~/.note-store/.extensions
The directory containing extension files.

.SH ENVIRONMENT VARIABLES

.TP
.I NOTE_STORE_DIR
Overrides the default note storage directory.
.TP
.I NOTE_STORE_KEY
Overrides the default gpg key identification set by \fBinit\fP. Keys must not
contain spaces and thus use of the hexadecimal key signature is recommended.
Multiple keys may be specified separated by spaces. 
.TP
.I NOTE_STORE_GPG_OPTS
Additional options to be passed to all invocations of GPG.
.TP
.I NOTE_STORE_UMASK
Sets the umask of all files modified by note, by default \fI077\fP.
.TP
.I NOTE_STORE_ENABLE_EXTENSIONS
This environment variable must be set to "true" for extensions to be enabled.
.TP
.I NOTE_STORE_EXTENSIONS_DIR
The location to look for executable extension files, by default
\fINOTE_STORE_DIR/.extensions\fP.
.TP
.I NOTE_STORE_SIGNING_KEY
If this environment variable is set, then all \fB.gpg-id\fP files and non-system extension files
must be signed using a detached signature using the GPG key specified by the full 40 character
upper-case fingerprint in this variable. If multiple fingerprints are specified, each
separated by a whitespace character, then signatures must match at least one.
The \fBinit\fP command will keep signatures of \fB.gpg-id\fP files up to date.
.TP
.I EDITOR
The location of the text editor used by \fBedit\fP.
.SH SEE ALSO
.BR gpg2 (1),
.BR git (1),

.SH AUTHOR
.B pass
was written by
.MT Jason@zx2c4.com
Jason A. Donenfeld
.ME .
For updates and more information, a project page is available on the
.UR http://\:www.passwordstore.org/
World Wide Web
.UE .

.B note
was forked by
.MT me
.ME .
There won't be no updates, unless I wanna. 
.UE .

.SH COPYING
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
